//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WillCore.UI.CLI.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WillCore.UI.CLI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] _filenesting {
            get {
                object obj = ResourceManager.GetObject("_filenesting", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { willCore, url, route, layout } from &quot;./willCore/WillCore.js&quot;;
        ///
        ///willCore(&quot;/&quot;);.
        /// </summary>
        internal static string index {
            get {
                return ResourceManager.GetString("index", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Binds the HTML elements to the collections.
        /// * Binding module
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// */
        ///var bindings = async (view) =&gt; {
        ///    
        ///};
        ///
        ///export { bindings };.
        /// </summary>
        internal static string view_itemName_bindings_js {
            get {
                return ResourceManager.GetString("view_itemName_bindings_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Builds up the collections that are used by the view.
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var collections = async (view, configuration) =&gt; {
        ///    
        ///};
        ///
        ///export { collections };.
        /// </summary>
        internal static string view_itemName_collections_js {
            get {
                return ResourceManager.GetString("view_itemName_collections_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Definition file for collection sources.
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var sources = async (view, configuration) =&gt; {
        ///    
        ///};
        ///
        ///export { sources };.
        /// </summary>
        internal static string view_itemName_collections_sources_js {
            get {
                return ResourceManager.GetString("view_itemName_collections_sources_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Definition file for collection targets.
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var targets = async (view, configuration) =&gt; {
        ///    
        ///};
        ///
        ///export { targets };.
        /// </summary>
        internal static string view_itemName_collections_targets_js {
            get {
                return ResourceManager.GetString("view_itemName_collections_targets_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Collection traps are validation methods on collections that return true or false.
        /// * If a trap returns false, a collection will not fire a update event.
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var traps = async (view, configuration) =&gt; {
        ///    
        ///};
        ///
        ///export { traps };.
        /// </summary>
        internal static string view_itemName_collections_traps_js {
            get {
                return ResourceManager.GetString("view_itemName_collections_traps_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Event binding module 
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var events = async (view, logic) =&gt; {
        ///
        ///};
        ///
        ///export { events };.
        /// </summary>
        internal static string view_itemName_events_js {
            get {
                return ResourceManager.GetString("view_itemName_events_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string view_itemName_html {
            get {
                return ResourceManager.GetString("view_itemName_html", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { collections } from &quot;./$safeitemname$.collections.js&quot;;
        ///import { bindings } from &quot;./$safeitemname$.bindings.js&quot;;
        ///import { logic } from &quot;./$safeitemname$.logic.js&quot;;
        ///import { events } from &quot;./$safeitemname$.events.js&quot;;
        ///import { sources } from &quot;./$safeitemname$.sources.js&quot;;
        ///import { traps } from &quot;./$safeitemname$.traps.js&quot;;
        ///import { targets } from &quot;./$safeitemname$.targets.js&quot;;
        ///
        ///
        ///const configuration = {
        ///};
        ///
        ////**
        /// * WillCore View: 
        /// * IOC binding that brings all the modules together for the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string view_itemName_js {
            get {
                return ResourceManager.GetString("view_itemName_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Logic module 
        /// * 
        /// * @typedef {import(&quot;./$safeitemname$.meta.js&quot;).viewMetaData} view
        /// * @param {view} view
        /// * @param {object} configuration
        /// */
        ///var logic = (view, configuration) =&gt; {
        ///    return
        ///        {
        ///        }
        ///};
        ///
        ///export { logic };.
        /// </summary>
        internal static string view_itemName_logic_js {
            get {
                return ResourceManager.GetString("view_itemName_logic_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Auto generated JSDoc comments: 
        /////Used to give predictions on the view scope.
        ///
        ////**
        ///*  Binds the HTML element&apos;s attributes to collection values.
        ///*  Requires:
        /// *  
        ///* */
        ///var attributeDoc = function () {
        ///
        ///};
        ///
        ////**
        /// *  HTML element link.
        /// * */
        ///var element = function(){
        ////**
        ///*  Binds the HTML element&apos;s attributes to collection values.
        ///* */
        ///    this.attribute= null;
        ////**
        ///*  Binds HTML events.
        ///* */
        ///    this.event= null;
        ////**
        ///*  Binds the HTML element&apos;s innerHTML to collection values.
        ///* */
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string view_itemName_meta_js {
            get {
                return ResourceManager.GetString("view_itemName_meta_js", resourceCulture);
            }
        }
    }
}
